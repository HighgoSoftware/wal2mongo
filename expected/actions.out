\set VERBOSITY terse
-- predictability
SET synchronous_commit = on;
SELECT 'init' FROM pg_create_logical_replication_slot('regression_slot', 'wal2mongo');
 ?column? 
----------
 init
(1 row)

-- actions
CREATE TABLE testing (a integer primary key);
INSERT INTO testing (a) VALUES(200);
UPDATE testing SET a = 500 WHERE a = 200;
DELETE FROM testing WHERE a = 500;
TRUNCATE TABLE testing;
-- peek changes according to action configuration
SELECT data FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'actions', 'insert', 'regress', 'true');
                                         data                                         
--------------------------------------------------------------------------------------
 use mycluster_mydb_regression_slot;
 db.testing.insertOne( { a: NumberInt("200") } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a: NumberInt("200") }, { $set:  { a: NumberInt("500") } } );
 use mycluster_mydb_regression_slot;
 db.testing.deleteOne( { a: NumberInt("500") } );
(6 rows)

SELECT data FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'actions', 'update', 'regress', 'true');
                                         data                                         
--------------------------------------------------------------------------------------
 use mycluster_mydb_regression_slot;
 db.testing.insertOne( { a: NumberInt("200") } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a: NumberInt("200") }, { $set:  { a: NumberInt("500") } } );
 use mycluster_mydb_regression_slot;
 db.testing.deleteOne( { a: NumberInt("500") } );
(6 rows)

SELECT data FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'actions', 'delete', 'regress', 'true');
                                         data                                         
--------------------------------------------------------------------------------------
 use mycluster_mydb_regression_slot;
 db.testing.insertOne( { a: NumberInt("200") } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a: NumberInt("200") }, { $set:  { a: NumberInt("500") } } );
 use mycluster_mydb_regression_slot;
 db.testing.deleteOne( { a: NumberInt("500") } );
(6 rows)

SELECT data FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'actions', 'truncate', 'regress', 'true');
                                         data                                         
--------------------------------------------------------------------------------------
 use mycluster_mydb_regression_slot;
 db.testing.insertOne( { a: NumberInt("200") } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a: NumberInt("200") }, { $set:  { a: NumberInt("500") } } );
 use mycluster_mydb_regression_slot;
 db.testing.deleteOne( { a: NumberInt("500") } );
(6 rows)

SELECT data FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'actions', 'insert, update, delete, truncate', 'regress', 'true');
                                         data                                         
--------------------------------------------------------------------------------------
 use mycluster_mydb_regression_slot;
 db.testing.insertOne( { a: NumberInt("200") } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a: NumberInt("200") }, { $set:  { a: NumberInt("500") } } );
 use mycluster_mydb_regression_slot;
 db.testing.deleteOne( { a: NumberInt("500") } );
(6 rows)

-- peek changes with default action configuraiton
SELECT data FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'regress', 'true');
                                         data                                         
--------------------------------------------------------------------------------------
 use mycluster_mydb_regression_slot;
 db.testing.insertOne( { a: NumberInt("200") } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a: NumberInt("200") }, { $set:  { a: NumberInt("500") } } );
 use mycluster_mydb_regression_slot;
 db.testing.deleteOne( { a: NumberInt("500") } );
(6 rows)

-- peek changes with several configuration parameter combinations
SELECT data FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'include_cluster_name', 'true', 'regress', 'true');
                                         data                                         
--------------------------------------------------------------------------------------
 use mycluster_mydb_regression_slot;
 db.testing.insertOne( { a: NumberInt("200") } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a: NumberInt("200") }, { $set:  { a: NumberInt("500") } } );
 use mycluster_mydb_regression_slot;
 db.testing.deleteOne( { a: NumberInt("500") } );
(6 rows)

SELECT data FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'skip_empty_xacts', 'true', 'regress', 'true');
                                         data                                         
--------------------------------------------------------------------------------------
 use mycluster_mydb_regression_slot;
 db.testing.insertOne( { a: NumberInt("200") } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a: NumberInt("200") }, { $set:  { a: NumberInt("500") } } );
 use mycluster_mydb_regression_slot;
 db.testing.deleteOne( { a: NumberInt("500") } );
(6 rows)

SELECT data FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'only_local', 'true', 'regress', 'true');
                                         data                                         
--------------------------------------------------------------------------------------
 use mycluster_mydb_regression_slot;
 db.testing.insertOne( { a: NumberInt("200") } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a: NumberInt("200") }, { $set:  { a: NumberInt("500") } } );
 use mycluster_mydb_regression_slot;
 db.testing.deleteOne( { a: NumberInt("500") } );
(6 rows)

SELECT data FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'use_transaction', 'true', 'regress', 'true');
                                         data                                         
--------------------------------------------------------------------------------------
 session0regression_slot = db.getMongo().startSession();
 session0regression_slot.startTransaction();
 session0regression_slot.commitTransaction();
 session0regression_slot.endSession();
 session0regression_slot = db.getMongo().startSession();
 session0regression_slot.startTransaction();
 use mycluster_mydb_regression_slot;
 db.testing.insertOne( { a: NumberInt("200") } );
 session0regression_slot.commitTransaction();
 session0regression_slot.endSession();
 session0regression_slot = db.getMongo().startSession();
 session0regression_slot.startTransaction();
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a: NumberInt("200") }, { $set:  { a: NumberInt("500") } } );
 session0regression_slot.commitTransaction();
 session0regression_slot.endSession();
 session0regression_slot = db.getMongo().startSession();
 session0regression_slot.startTransaction();
 use mycluster_mydb_regression_slot;
 db.testing.deleteOne( { a: NumberInt("500") } );
 session0regression_slot.commitTransaction();
 session0regression_slot.endSession();
 session0regression_slot = db.getMongo().startSession();
 session0regression_slot.startTransaction();
 session0regression_slot.commitTransaction();
 session0regression_slot.endSession();
(26 rows)

-- peek changes with invalid actions
SELECT data FROM pg_logical_slot_peek_changes('regression_slot', NULL, NULL, 'actions', 'insert, xxx, delete, xxx', 'regress', 'true');
ERROR:  could not parse value "xxx" for parameter "actions"
DROP TABLE testing;
SELECT 'end' FROM pg_drop_replication_slot('regression_slot');
 ?column? 
----------
 end
(1 row)

