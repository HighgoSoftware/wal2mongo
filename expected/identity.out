\set VERBOSITY terse
-- predictability
SET synchronous_commit = on;
SELECT 'init' FROM pg_create_logical_replication_slot('regression_slot', 'wal2mongo');
 ?column? 
----------
 init
(1 row)

-- Replica identity nothing
CREATE TABLE testing (a varchar(30) primary key, b INT, c INT);
ALTER TABLE testing REPLICA IDENTITY NOTHING;
BEGIN;
INSERT INTO testing VALUES('aaa', 123, 456);
UPDATE testing set b = 789 where a = 'aaa';
UPDATE testing set a = 'bbb';
DELETE from testing where a = 'bbb';
COMMIT;
-- Replica identity default
BEGIN;
ALTER TABLE testing REPLICA IDENTITY DEFAULT;
INSERT INTO testing VALUES('aaa', 123, 456);
UPDATE testing set b = 789 where a = 'aaa';
UPDATE testing set a = 'bbb';
DELETE from testing where a = 'bbb';
COMMIT;
-- Replica identity full
BEGIN;
ALTER TABLE testing REPLICA IDENTITY FULL;
INSERT INTO testing VALUES('aaa', 123, 456);
UPDATE testing set b = 789 where a = 'aaa';
UPDATE testing set a = 'bbb';
DELETE from testing where a = 'bbb';
COMMIT;
-- Replica identity index
CREATE INDEX idx_test ON testing(b);
ALTER TABLE testing REPLICA IDENTITY INDEX;
ERROR:  syntax error at or near "INDEX" at character 38
INSERT INTO testing VALUES('aaa', 123, 456);
UPDATE testing set b = 789 where a = 'aaa';
UPDATE testing set a = 'bbb';
DELETE from testing where a = 'bbb';
COMMIT;
WARNING:  there is no transaction in progress
-- get changes
SELECT data FROM pg_logical_slot_get_changes('regression_slot', NULL, NULL, 'regress', 'true', 'skip_empty_xacts', 'true');
                                                  data                                                  
--------------------------------------------------------------------------------------------------------
 use mycluster_mydb_regression_slot;
 db.testing.insertOne( { a:"aaa", b: NumberInt("123"), c: NumberInt("456") } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a:"aaa" }, { $set:  { a:"aaa", b: NumberInt("789"), c: NumberInt("456") } } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a:"bbb" }, { $set:  { a:"bbb", b: NumberInt("789"), c: NumberInt("456") } } );
 use mycluster_mydb_regression_slot;
 db.testing.deleteOne( (no-tuple-data) );
 use mycluster_mydb_regression_slot;
 db.testing.insertOne( { a:"aaa", b: NumberInt("123"), c: NumberInt("456") } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a:"aaa" }, { $set:  { a:"aaa", b: NumberInt("789"), c: NumberInt("456") } } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a:"aaa" }, { $set:  { a:"bbb", b: NumberInt("789"), c: NumberInt("456") } } );
 use mycluster_mydb_regression_slot;
 db.testing.deleteOne( { a:"bbb" } );
 use mycluster_mydb_regression_slot;
 db.testing.insertOne( { a:"aaa", b: NumberInt("123"), c: NumberInt("456") } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a:"aaa" }, { $set:  { a:"aaa", b: NumberInt("789"), c: NumberInt("456") } } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a:"aaa" }, { $set:  { a:"bbb", b: NumberInt("789"), c: NumberInt("456") } } );
 use mycluster_mydb_regression_slot;
 db.testing.deleteOne( { a:"bbb" } );
 use mycluster_mydb_regression_slot;
 db.testing.insertOne( { a:"aaa", b: NumberInt("123"), c: NumberInt("456") } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a:"aaa" }, { $set:  { a:"aaa", b: NumberInt("789"), c: NumberInt("456") } } );
 use mycluster_mydb_regression_slot;
 db.testing.updateOne( { a:"aaa" }, { $set:  { a:"bbb", b: NumberInt("789"), c: NumberInt("456") } } );
 use mycluster_mydb_regression_slot;
 db.testing.deleteOne( { a:"bbb" } );
(32 rows)

DROP TABLE testing;
SELECT 'end' FROM pg_drop_replication_slot('regression_slot');
 ?column? 
----------
 end
(1 row)

